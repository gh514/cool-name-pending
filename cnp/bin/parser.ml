type token =
  | INT of (int)
  | VAR of (string)
  | TRUE
  | FALSE
  | GRID
  | CROSS
  | CELL
  | REGION
  | CENTRELINE
  | EDGELINE
  | R
  | C
  | INTDEC
  | BOOLDEC
  | ROW
  | COLUMN
  | BOX
  | ADD
  | SUB
  | MUL
  | DIV
  | ABS
  | DIFF
  | AND
  | OR
  | NOT
  | XOR
  | EQUAL
  | LT
  | GT
  | LTE
  | GTE
  | UNEQUAL
  | MEMBER
  | ADJACENT
  | LEFTIMP
  | RIGHTIMP
  | BIIMP
  | LBRACK
  | RBRACK
  | LSBRACK
  | RSBRACK
  | SEMICOLON
  | POINT
  | TO
  | COMMA
  | FORALL
  | EXISTS
  | NFORALL
  | NEXISTS
  | IN
  | ARE
  | SIZE
  | LENGTH
  | SUM
  | DISTINCT
  | EQUIVALENT
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"

let location = Parsing.symbol_start_pos;;

# 68 "parser.ml"
let yytransl_const = [|
  259 (* TRUE *);
  260 (* FALSE *);
  261 (* GRID *);
  262 (* CROSS *);
  263 (* CELL *);
  264 (* REGION *);
  265 (* CENTRELINE *);
  266 (* EDGELINE *);
  267 (* R *);
  268 (* C *);
  269 (* INTDEC *);
  270 (* BOOLDEC *);
  271 (* ROW *);
  272 (* COLUMN *);
  273 (* BOX *);
  274 (* ADD *);
  275 (* SUB *);
  276 (* MUL *);
  277 (* DIV *);
  278 (* ABS *);
  279 (* DIFF *);
  280 (* AND *);
  281 (* OR *);
  282 (* NOT *);
  283 (* XOR *);
  284 (* EQUAL *);
  285 (* LT *);
  286 (* GT *);
  287 (* LTE *);
  288 (* GTE *);
  289 (* UNEQUAL *);
  290 (* MEMBER *);
  291 (* ADJACENT *);
  292 (* LEFTIMP *);
  293 (* RIGHTIMP *);
  294 (* BIIMP *);
  295 (* LBRACK *);
  296 (* RBRACK *);
  297 (* LSBRACK *);
  298 (* RSBRACK *);
  299 (* SEMICOLON *);
  300 (* POINT *);
  301 (* TO *);
  302 (* COMMA *);
  303 (* FORALL *);
  304 (* EXISTS *);
  305 (* NFORALL *);
  306 (* NEXISTS *);
  307 (* IN *);
  308 (* ARE *);
  309 (* SIZE *);
  310 (* LENGTH *);
  311 (* SUM *);
  312 (* DISTINCT *);
  313 (* EQUIVALENT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\008\000\008\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\009\000\009\000\010\000\010\000\010\000\010\000\010\000\
\011\000\011\000\011\000\011\000\012\000\012\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\004\000\004\000\005\000\
\005\000\005\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\004\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\004\000\002\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\002\000\002\000\002\000\002\000\002\000\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000\001\000\
\003\000\001\000\003\000\003\000\003\000\003\000\002\000\002\000\
\003\000\003\000\003\000\003\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\005\000\
\003\000\008\000\006\000\003\000\005\000\004\000\002\000\001\000\
\002\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\075\000\000\000\000\000\005\000\006\000\
\003\000\004\000\019\000\012\000\000\000\014\000\015\000\000\000\
\010\000\011\000\022\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\033\000\034\000\035\000\036\000\
\002\000\000\000\000\000\000\000\009\000\000\000\042\000\000\000\
\000\000\000\000\025\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\001\000\000\000\000\000\000\000\013\000\016\000\
\000\000\000\000\070\000\000\000\000\000\000\000\041\000\020\000\
\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\074\000\028\000\031\000\029\000\
\030\000\032\000\021\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\037\000\038\000\069\000\000\000\000\000\000\000\067\000\000\000\
\066\000"

let yydgoto = "\002\000\
\004\000\034\000\035\000\005\000\036\000\037\000\038\000\039\000\
\040\000\074\000\041\000\131\000"

let yysindex = "\014\000\
\024\255\000\000\031\255\000\000\028\006\029\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\006\
\000\000\000\000\000\000\000\000\000\000\139\255\139\255\139\255\
\139\255\139\255\057\006\000\000\000\000\000\000\000\000\000\000\
\000\000\237\254\063\006\037\000\000\000\071\255\000\000\006\255\
\107\255\040\255\000\000\000\000\244\254\255\254\246\254\189\255\
\242\254\084\006\234\254\005\255\057\006\057\006\057\006\139\255\
\139\255\139\255\139\255\139\255\139\255\139\255\139\255\139\255\
\139\255\139\255\139\255\139\255\139\255\139\255\139\255\139\255\
\251\254\000\000\000\000\087\255\042\255\057\006\000\000\000\000\
\057\006\002\255\000\000\057\006\139\255\246\254\000\000\000\000\
\253\254\032\255\000\000\255\254\255\254\246\254\246\254\255\254\
\246\254\246\254\242\254\000\000\242\254\242\254\242\254\242\254\
\242\254\186\006\186\006\165\006\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\255\057\006\032\255\087\255\044\255\
\000\000\255\254\057\006\238\254\032\255\041\255\139\255\032\255\
\000\000\000\000\000\000\045\255\111\006\139\255\000\000\138\006\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\051\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\101\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\201\000\090\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\002\252\002\000\000\
\040\004\000\000\151\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\093\000\
\000\000\000\000\000\000\000\000\046\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\003\000\000\000\000\
\107\001\001\000\000\000\052\002\102\002\096\003\146\003\152\002\
\196\003\246\003\090\004\000\000\140\004\190\004\240\004\034\005\
\084\005\134\005\184\005\234\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\157\001\000\000\000\000\
\000\000\202\002\000\000\000\000\251\000\000\000\000\000\207\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\053\000\252\255\000\000\022\000\205\255\055\000\056\000\
\246\255\000\000\000\000\000\000"

let yytablesize = 2022
let yytable = "\084\000\
\008\000\110\000\111\000\056\000\057\000\058\000\059\000\056\000\
\057\000\060\000\061\000\100\000\062\000\060\000\001\000\053\000\
\052\000\046\000\047\000\048\000\049\000\050\000\054\000\055\000\
\116\000\054\000\055\000\077\000\003\000\073\000\123\000\006\000\
\054\000\073\000\042\000\119\000\075\000\129\000\130\000\078\000\
\083\000\054\000\073\000\086\000\091\000\120\000\088\000\112\000\
\113\000\114\000\025\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\126\000\045\000\117\000\077\000\007\000\
\008\000\009\000\010\000\011\000\054\000\124\000\043\000\051\000\
\122\000\016\000\127\000\134\000\132\000\019\000\020\000\044\000\
\115\000\072\000\051\000\011\000\073\000\109\000\043\000\081\000\
\082\000\000\000\000\000\000\000\024\000\019\000\020\000\044\000\
\076\000\089\000\090\000\051\000\000\000\000\000\000\000\027\000\
\000\000\012\000\079\000\014\000\015\000\000\000\000\000\017\000\
\018\000\000\000\133\000\080\000\000\000\000\000\000\000\027\000\
\000\000\136\000\118\000\000\000\000\000\051\000\000\000\000\000\
\121\000\000\000\000\000\007\000\008\000\009\000\010\000\011\000\
\000\000\012\000\013\000\014\000\015\000\016\000\026\000\017\000\
\018\000\019\000\020\000\021\000\000\000\022\000\000\000\000\000\
\023\000\024\000\000\000\000\000\025\000\000\000\000\000\000\000\
\000\000\125\000\000\000\000\000\000\000\000\000\000\000\128\000\
\000\000\026\000\000\000\027\000\000\000\000\000\000\000\000\000\
\000\000\029\000\030\000\031\000\032\000\007\000\008\000\009\000\
\010\000\011\000\000\000\012\000\013\000\014\000\015\000\016\000\
\040\000\017\000\018\000\019\000\020\000\021\000\056\000\085\000\
\058\000\059\000\023\000\024\000\060\000\061\000\025\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\000\000\000\000\
\069\000\070\000\071\000\026\000\000\000\027\000\000\000\000\000\
\073\000\000\000\000\000\029\000\030\000\031\000\032\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\008\000\008\000\008\000\008\000\000\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\018\000\008\000\008\000\
\008\000\008\000\008\000\013\000\013\000\013\000\013\000\013\000\
\000\000\025\000\013\000\025\000\025\000\013\000\000\000\025\000\
\025\000\013\000\013\000\013\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\013\000\025\000\025\000\025\000\
\025\000\025\000\025\000\013\000\000\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\016\000\016\000\016\000\
\016\000\016\000\065\000\024\000\016\000\024\000\024\000\016\000\
\000\000\024\000\024\000\016\000\016\000\016\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\016\000\024\000\
\024\000\024\000\024\000\024\000\024\000\016\000\000\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\026\000\
\026\000\026\000\026\000\026\000\068\000\026\000\026\000\026\000\
\026\000\026\000\000\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\000\000\000\000\026\000\026\000\026\000\
\026\000\040\000\040\000\040\000\040\000\040\000\064\000\040\000\
\040\000\040\000\040\000\040\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\026\000\000\000\040\000\040\000\040\000\040\000\
\040\000\040\000\000\000\040\000\040\000\000\000\000\000\040\000\
\040\000\040\000\040\000\017\000\017\000\017\000\017\000\017\000\
\048\000\017\000\017\000\017\000\017\000\017\000\000\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\000\000\017\000\017\000\
\017\000\017\000\017\000\017\000\000\000\017\000\017\000\000\000\
\000\000\017\000\017\000\017\000\017\000\000\000\018\000\018\000\
\018\000\018\000\018\000\043\000\018\000\018\000\018\000\018\000\
\018\000\000\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\000\000\018\000\018\000\018\000\018\000\018\000\018\000\
\000\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
\018\000\018\000\000\000\000\000\018\000\018\000\018\000\018\000\
\000\000\000\000\000\000\000\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\065\000\065\000\065\000\065\000\065\000\
\000\000\065\000\065\000\065\000\065\000\065\000\000\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\000\000\000\000\065\000\065\000\
\065\000\065\000\065\000\065\000\000\000\065\000\065\000\050\000\
\000\000\065\000\065\000\065\000\065\000\068\000\068\000\068\000\
\068\000\068\000\000\000\068\000\068\000\068\000\068\000\068\000\
\000\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\000\000\000\000\
\068\000\068\000\068\000\068\000\068\000\068\000\000\000\068\000\
\068\000\048\000\000\000\068\000\068\000\068\000\068\000\064\000\
\064\000\064\000\064\000\064\000\000\000\064\000\064\000\064\000\
\064\000\064\000\000\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\000\000\000\000\064\000\064\000\064\000\064\000\064\000\064\000\
\000\000\064\000\064\000\047\000\000\000\064\000\064\000\064\000\
\064\000\048\000\048\000\048\000\048\000\048\000\000\000\048\000\
\048\000\048\000\048\000\048\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\000\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\048\000\000\000\049\000\000\000\048\000\
\048\000\048\000\048\000\000\000\043\000\043\000\043\000\043\000\
\043\000\000\000\043\000\043\000\043\000\043\000\043\000\000\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\000\000\000\000\043\000\
\043\000\043\000\043\000\043\000\043\000\000\000\043\000\045\000\
\000\000\000\000\043\000\043\000\043\000\043\000\044\000\044\000\
\044\000\044\000\044\000\000\000\044\000\044\000\044\000\044\000\
\044\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\000\000\
\000\000\044\000\044\000\044\000\044\000\044\000\044\000\000\000\
\044\000\046\000\000\000\000\000\044\000\044\000\044\000\044\000\
\050\000\050\000\050\000\050\000\050\000\000\000\050\000\050\000\
\050\000\050\000\050\000\000\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\000\000\000\000\050\000\050\000\050\000\050\000\050\000\
\050\000\000\000\050\000\051\000\000\000\000\000\050\000\050\000\
\050\000\050\000\044\000\044\000\044\000\044\000\044\000\000\000\
\044\000\044\000\044\000\044\000\044\000\000\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\000\000\000\000\044\000\044\000\044\000\
\044\000\048\000\044\000\000\000\048\000\052\000\000\000\000\000\
\044\000\044\000\044\000\044\000\047\000\047\000\047\000\047\000\
\047\000\000\000\047\000\047\000\047\000\047\000\047\000\000\000\
\047\000\047\000\047\000\047\000\047\000\000\000\000\000\047\000\
\047\000\047\000\047\000\000\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\000\000\000\000\047\000\
\047\000\047\000\047\000\047\000\047\000\000\000\047\000\053\000\
\000\000\000\000\047\000\047\000\047\000\047\000\049\000\049\000\
\049\000\049\000\049\000\000\000\049\000\049\000\049\000\049\000\
\049\000\000\000\049\000\049\000\049\000\049\000\049\000\000\000\
\000\000\049\000\049\000\049\000\049\000\000\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\000\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\049\000\055\000\000\000\000\000\049\000\049\000\049\000\049\000\
\045\000\045\000\045\000\045\000\045\000\000\000\045\000\045\000\
\045\000\045\000\045\000\000\000\045\000\045\000\045\000\045\000\
\045\000\000\000\000\000\045\000\045\000\045\000\045\000\000\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\000\000\000\000\045\000\045\000\045\000\045\000\045\000\
\045\000\000\000\045\000\056\000\000\000\000\000\045\000\045\000\
\045\000\045\000\046\000\046\000\046\000\046\000\046\000\000\000\
\046\000\046\000\046\000\046\000\046\000\000\000\046\000\046\000\
\046\000\046\000\046\000\000\000\000\000\046\000\046\000\046\000\
\046\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\000\000\000\000\046\000\046\000\046\000\
\046\000\046\000\046\000\000\000\046\000\057\000\000\000\000\000\
\046\000\046\000\046\000\046\000\051\000\051\000\051\000\051\000\
\051\000\000\000\051\000\051\000\051\000\051\000\051\000\000\000\
\051\000\051\000\051\000\051\000\051\000\000\000\000\000\051\000\
\051\000\051\000\051\000\000\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\000\000\000\000\051\000\
\051\000\051\000\051\000\051\000\051\000\000\000\051\000\058\000\
\000\000\000\000\051\000\051\000\051\000\051\000\052\000\052\000\
\052\000\052\000\052\000\000\000\052\000\052\000\052\000\052\000\
\052\000\000\000\052\000\052\000\052\000\052\000\052\000\000\000\
\000\000\052\000\052\000\052\000\052\000\000\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\000\000\
\000\000\052\000\052\000\052\000\052\000\052\000\052\000\000\000\
\052\000\059\000\000\000\000\000\052\000\052\000\052\000\052\000\
\053\000\053\000\053\000\053\000\053\000\000\000\053\000\053\000\
\053\000\053\000\053\000\000\000\053\000\053\000\053\000\053\000\
\053\000\000\000\000\000\000\000\000\000\053\000\053\000\000\000\
\000\000\053\000\000\000\053\000\053\000\053\000\053\000\053\000\
\053\000\000\000\000\000\053\000\053\000\053\000\053\000\053\000\
\053\000\000\000\053\000\060\000\000\000\000\000\053\000\053\000\
\053\000\053\000\055\000\055\000\055\000\055\000\055\000\000\000\
\055\000\055\000\055\000\055\000\055\000\000\000\055\000\055\000\
\055\000\055\000\055\000\000\000\000\000\000\000\000\000\055\000\
\055\000\000\000\000\000\055\000\000\000\055\000\055\000\055\000\
\055\000\055\000\055\000\000\000\000\000\055\000\055\000\055\000\
\055\000\055\000\055\000\000\000\055\000\061\000\000\000\000\000\
\055\000\055\000\055\000\055\000\056\000\056\000\056\000\056\000\
\056\000\000\000\056\000\056\000\056\000\056\000\056\000\000\000\
\056\000\056\000\056\000\056\000\056\000\000\000\000\000\000\000\
\000\000\056\000\056\000\000\000\000\000\056\000\000\000\056\000\
\056\000\056\000\056\000\056\000\056\000\000\000\000\000\056\000\
\056\000\056\000\056\000\056\000\056\000\000\000\056\000\062\000\
\000\000\000\000\056\000\056\000\056\000\056\000\057\000\057\000\
\057\000\057\000\057\000\000\000\057\000\057\000\057\000\057\000\
\057\000\000\000\057\000\057\000\057\000\057\000\057\000\000\000\
\000\000\000\000\000\000\057\000\057\000\000\000\000\000\057\000\
\000\000\057\000\057\000\057\000\057\000\057\000\057\000\000\000\
\000\000\057\000\057\000\057\000\057\000\057\000\057\000\000\000\
\057\000\063\000\000\000\000\000\057\000\057\000\057\000\057\000\
\058\000\058\000\058\000\058\000\058\000\000\000\058\000\058\000\
\058\000\058\000\058\000\000\000\058\000\058\000\058\000\058\000\
\058\000\000\000\000\000\000\000\000\000\058\000\058\000\000\000\
\000\000\058\000\000\000\058\000\058\000\058\000\058\000\058\000\
\058\000\000\000\000\000\058\000\058\000\058\000\058\000\058\000\
\058\000\000\000\058\000\033\000\000\000\000\000\058\000\058\000\
\058\000\058\000\059\000\059\000\059\000\059\000\059\000\000\000\
\059\000\059\000\059\000\059\000\059\000\000\000\059\000\059\000\
\059\000\059\000\059\000\000\000\000\000\000\000\000\000\059\000\
\059\000\000\000\000\000\059\000\000\000\059\000\059\000\059\000\
\059\000\059\000\059\000\000\000\000\000\059\000\059\000\059\000\
\059\000\059\000\059\000\000\000\059\000\000\000\000\000\000\000\
\059\000\059\000\059\000\059\000\060\000\060\000\060\000\060\000\
\060\000\000\000\060\000\060\000\060\000\060\000\060\000\000\000\
\060\000\060\000\060\000\060\000\060\000\000\000\000\000\000\000\
\000\000\060\000\060\000\000\000\000\000\060\000\000\000\060\000\
\060\000\060\000\060\000\060\000\060\000\000\000\000\000\060\000\
\060\000\060\000\060\000\060\000\060\000\000\000\060\000\000\000\
\000\000\000\000\060\000\060\000\060\000\060\000\061\000\061\000\
\061\000\061\000\061\000\000\000\061\000\061\000\061\000\061\000\
\061\000\000\000\061\000\061\000\061\000\061\000\061\000\000\000\
\000\000\000\000\000\000\061\000\061\000\000\000\000\000\061\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\061\000\061\000\061\000\061\000\061\000\000\000\
\061\000\000\000\000\000\000\000\061\000\061\000\061\000\061\000\
\062\000\062\000\062\000\062\000\062\000\000\000\062\000\062\000\
\062\000\062\000\062\000\000\000\062\000\062\000\062\000\062\000\
\062\000\000\000\000\000\000\000\000\000\062\000\062\000\000\000\
\000\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\062\000\062\000\062\000\062\000\062\000\
\062\000\000\000\062\000\000\000\000\000\000\000\062\000\062\000\
\062\000\062\000\063\000\063\000\063\000\063\000\063\000\000\000\
\063\000\063\000\063\000\063\000\063\000\000\000\063\000\063\000\
\063\000\063\000\063\000\000\000\000\000\000\000\000\000\063\000\
\063\000\000\000\000\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\000\
\063\000\063\000\063\000\000\000\063\000\000\000\000\000\000\000\
\063\000\063\000\063\000\063\000\007\000\008\000\009\000\010\000\
\011\000\000\000\012\000\013\000\014\000\015\000\016\000\000\000\
\017\000\018\000\019\000\020\000\021\000\000\000\022\000\000\000\
\000\000\023\000\024\000\000\000\000\000\025\000\000\000\000\000\
\000\000\007\000\008\000\009\000\010\000\011\000\000\000\000\000\
\043\000\000\000\026\000\016\000\027\000\000\000\028\000\019\000\
\020\000\044\000\029\000\030\000\031\000\032\000\000\000\000\000\
\056\000\057\000\058\000\059\000\000\000\000\000\060\000\061\000\
\000\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\000\000\027\000\069\000\070\000\071\000\056\000\057\000\058\000\
\059\000\072\000\073\000\060\000\061\000\000\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\000\000\000\000\069\000\
\070\000\071\000\000\000\087\000\000\000\000\000\000\000\073\000\
\056\000\057\000\058\000\059\000\000\000\000\000\060\000\061\000\
\000\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\000\000\000\000\069\000\070\000\071\000\000\000\135\000\000\000\
\000\000\000\000\073\000\056\000\057\000\058\000\059\000\000\000\
\000\000\060\000\061\000\000\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\000\000\000\000\069\000\070\000\071\000\
\000\000\137\000\000\000\000\000\000\000\073\000\056\000\057\000\
\058\000\059\000\000\000\000\000\060\000\061\000\000\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\000\000\000\000\
\069\000\070\000\000\000\056\000\057\000\058\000\059\000\000\000\
\073\000\060\000\061\000\000\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\073\000"

let yycheck = "\012\001\
\000\000\007\001\008\001\018\001\019\001\020\001\021\001\018\001\
\019\001\024\001\025\001\063\000\027\001\024\001\001\000\035\001\
\027\000\022\000\023\000\024\000\025\000\026\000\045\001\046\001\
\076\000\045\001\046\001\038\000\005\001\044\001\034\001\001\001\
\045\001\044\001\006\001\034\001\000\000\056\001\057\001\034\001\
\001\001\045\001\044\001\048\000\055\000\044\001\042\001\053\001\
\054\001\055\001\000\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\119\000\016\000\028\001\081\000\001\001\
\002\001\003\001\004\001\005\001\045\001\052\001\008\001\027\000\
\085\000\011\001\039\001\039\001\044\001\015\001\016\001\017\001\
\002\001\000\000\038\000\005\001\000\000\072\000\008\001\041\000\
\041\000\255\255\255\255\255\255\000\000\015\001\016\001\017\001\
\034\001\053\000\054\000\055\000\255\255\255\255\255\255\041\001\
\255\255\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\255\255\127\000\017\001\255\255\255\255\255\255\041\001\
\255\255\134\000\078\000\255\255\255\255\081\000\255\255\255\255\
\084\000\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\007\001\008\001\009\001\010\001\011\001\000\000\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\255\255\255\255\
\022\001\023\001\255\255\255\255\026\001\255\255\255\255\255\255\
\255\255\117\000\255\255\255\255\255\255\255\255\255\255\123\000\
\255\255\039\001\255\255\041\001\255\255\255\255\255\255\255\255\
\255\255\047\001\048\001\049\001\050\001\001\001\002\001\003\001\
\004\001\005\001\255\255\007\001\008\001\009\001\010\001\011\001\
\000\000\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\255\255\255\255\
\036\001\037\001\038\001\039\001\255\255\041\001\255\255\255\255\
\044\001\255\255\255\255\047\001\048\001\049\001\050\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\000\000\046\001\047\001\
\048\001\049\001\050\001\001\001\002\001\003\001\004\001\005\001\
\255\255\007\001\008\001\009\001\010\001\011\001\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\001\001\002\001\003\001\
\004\001\005\001\000\000\007\001\008\001\009\001\010\001\011\001\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\001\001\
\002\001\003\001\004\001\005\001\000\000\007\001\008\001\009\001\
\010\001\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\255\255\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\255\255\255\255\047\001\048\001\049\001\
\050\001\001\001\002\001\003\001\004\001\005\001\000\000\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\255\255\043\001\044\001\255\255\255\255\047\001\
\048\001\049\001\050\001\001\001\002\001\003\001\004\001\005\001\
\000\000\007\001\008\001\009\001\010\001\011\001\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\255\255\036\001\037\001\
\038\001\039\001\040\001\041\001\255\255\043\001\044\001\255\255\
\255\255\047\001\048\001\049\001\050\001\255\255\001\001\002\001\
\003\001\004\001\005\001\000\000\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\029\001\030\001\031\001\032\001\033\001\034\001\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\043\001\044\001\255\255\255\255\047\001\048\001\049\001\050\001\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\007\001\008\001\009\001\010\001\011\001\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\255\255\255\255\036\001\037\001\
\038\001\039\001\040\001\041\001\255\255\043\001\044\001\000\000\
\255\255\047\001\048\001\049\001\050\001\001\001\002\001\003\001\
\004\001\005\001\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\255\255\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\255\255\043\001\
\044\001\000\000\255\255\047\001\048\001\049\001\050\001\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\008\001\009\001\
\010\001\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\036\001\037\001\038\001\039\001\040\001\041\001\
\255\255\043\001\044\001\000\000\255\255\047\001\048\001\049\001\
\050\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\255\255\043\001\255\255\000\000\255\255\047\001\
\048\001\049\001\050\001\255\255\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\255\255\043\001\000\000\
\255\255\255\255\047\001\048\001\049\001\050\001\001\001\002\001\
\003\001\004\001\005\001\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\043\001\000\000\255\255\255\255\047\001\048\001\049\001\050\001\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\255\255\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\043\001\000\000\255\255\255\255\047\001\048\001\
\049\001\050\001\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\255\255\043\001\000\000\255\255\255\255\
\047\001\048\001\049\001\050\001\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\255\255\043\001\000\000\
\255\255\255\255\047\001\048\001\049\001\050\001\001\001\002\001\
\003\001\004\001\005\001\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\043\001\000\000\255\255\255\255\047\001\048\001\049\001\050\001\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\255\255\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\043\001\000\000\255\255\255\255\047\001\048\001\
\049\001\050\001\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\255\255\043\001\000\000\255\255\255\255\
\047\001\048\001\049\001\050\001\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\255\255\043\001\000\000\
\255\255\255\255\047\001\048\001\049\001\050\001\001\001\002\001\
\003\001\004\001\005\001\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\043\001\000\000\255\255\255\255\047\001\048\001\049\001\050\001\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\022\001\023\001\255\255\
\255\255\026\001\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\255\255\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\043\001\000\000\255\255\255\255\047\001\048\001\
\049\001\050\001\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\255\255\022\001\
\023\001\255\255\255\255\026\001\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\255\255\043\001\000\000\255\255\255\255\
\047\001\048\001\049\001\050\001\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\255\255\022\001\023\001\255\255\255\255\026\001\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\255\255\043\001\000\000\
\255\255\255\255\047\001\048\001\049\001\050\001\001\001\002\001\
\003\001\004\001\005\001\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\255\255\022\001\023\001\255\255\255\255\026\001\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\043\001\000\000\255\255\255\255\047\001\048\001\049\001\050\001\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\022\001\023\001\255\255\
\255\255\026\001\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\255\255\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\043\001\000\000\255\255\255\255\047\001\048\001\
\049\001\050\001\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\255\255\022\001\
\023\001\255\255\255\255\026\001\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\255\255\043\001\255\255\255\255\255\255\
\047\001\048\001\049\001\050\001\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\255\255\022\001\023\001\255\255\255\255\026\001\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\255\255\043\001\255\255\
\255\255\255\255\047\001\048\001\049\001\050\001\001\001\002\001\
\003\001\004\001\005\001\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\255\255\022\001\023\001\255\255\255\255\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\043\001\255\255\255\255\255\255\047\001\048\001\049\001\050\001\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\022\001\023\001\255\255\
\255\255\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\043\001\255\255\255\255\255\255\047\001\048\001\
\049\001\050\001\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\255\255\022\001\
\023\001\255\255\255\255\026\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\041\001\255\255\043\001\255\255\255\255\255\255\
\047\001\048\001\049\001\050\001\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\255\255\
\255\255\022\001\023\001\255\255\255\255\026\001\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\039\001\011\001\041\001\255\255\043\001\015\001\
\016\001\017\001\047\001\048\001\049\001\050\001\255\255\255\255\
\018\001\019\001\020\001\021\001\255\255\255\255\024\001\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\041\001\036\001\037\001\038\001\018\001\019\001\020\001\
\021\001\043\001\044\001\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\036\001\
\037\001\038\001\255\255\040\001\255\255\255\255\255\255\044\001\
\018\001\019\001\020\001\021\001\255\255\255\255\024\001\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\036\001\037\001\038\001\255\255\040\001\255\255\
\255\255\255\255\044\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\036\001\037\001\038\001\
\255\255\040\001\255\255\255\255\255\255\044\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\025\001\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\255\255\255\255\
\036\001\037\001\255\255\018\001\019\001\020\001\021\001\255\255\
\044\001\024\001\025\001\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\044\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  GRID\000\
  CROSS\000\
  CELL\000\
  REGION\000\
  CENTRELINE\000\
  EDGELINE\000\
  R\000\
  C\000\
  INTDEC\000\
  BOOLDEC\000\
  ROW\000\
  COLUMN\000\
  BOX\000\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  ABS\000\
  DIFF\000\
  AND\000\
  OR\000\
  NOT\000\
  XOR\000\
  EQUAL\000\
  LT\000\
  GT\000\
  LTE\000\
  GTE\000\
  UNEQUAL\000\
  MEMBER\000\
  ADJACENT\000\
  LEFTIMP\000\
  RIGHTIMP\000\
  BIIMP\000\
  LBRACK\000\
  RBRACK\000\
  LSBRACK\000\
  RSBRACK\000\
  SEMICOLON\000\
  POINT\000\
  TO\000\
  COMMA\000\
  FORALL\000\
  EXISTS\000\
  NFORALL\000\
  NEXISTS\000\
  IN\000\
  ARE\000\
  SIZE\000\
  LENGTH\000\
  SUM\000\
  DISTINCT\000\
  EQUIVALENT\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'init) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 42 "parser.mly"
                                            ((_1, _2))
# 808 "parser.ml"
               : ((Lexing.position * int * int) * Past.expr list)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'init) in
    Obj.repr(
# 43 "parser.mly"
                                            ((_1, []))
# 815 "parser.ml"
               : ((Lexing.position * int * int) * Past.expr list)))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                                            (Past.Boolean(location(), true))
# 821 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
                                            (Past.Boolean(location(), false))
# 827 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 48 "parser.mly"
                                            (Past.Integer(location(), _1))
# 834 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 49 "parser.mly"
                                            (Past.Var(location(), _1))
# 841 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 50 "parser.mly"
                                            (Past.RC(location(), _2, _4))
# 849 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 51 "parser.mly"
                                            (Past.Range(location(), _1, _3))
# 857 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'group) in
    Obj.repr(
# 52 "parser.mly"
                                            (Past.Group(location(), _1))
# 864 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                                            (Past.Int)
# 870 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                                            (Past.Bool)
# 876 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
                                            (Past.Cell)
# 882 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
                                            (Past.Region)
# 888 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                                            (Past.CentreLine)
# 894 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
                                            (Past.EdgeLine)
# 900 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                                            (Past.Box)
# 906 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 64 "parser.mly"
                                            (Past.Dec(location(), _1, Past.List(location(), _2), Some(_4)))
# 915 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'list) in
    Obj.repr(
# 65 "parser.mly"
                                            (Past.Dec(location(), _1, Past.List(location(), _2), None))
# 923 "parser.ml"
               : 'dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
                                            (Past.Grid)
# 929 "parser.ml"
               : 'group))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 69 "parser.mly"
                                            (Past.Instance(Past.List(location(), _2)))
# 936 "parser.ml"
               : 'group))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 70 "parser.mly"
                                            (Past.Instance(Past.Var(location(), _1)))
# 943 "parser.ml"
               : 'group))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
                                            (Past.Row)
# 949 "parser.ml"
               : 'group))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
                                            (Past.Column)
# 955 "parser.ml"
               : 'group))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                                            (Past.Boxes)
# 961 "parser.ml"
               : 'group))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
                                            (Past.Regions)
# 967 "parser.ml"
               : 'group))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 77 "parser.mly"
                                            ([_1])
# 974 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list) in
    Obj.repr(
# 78 "parser.mly"
                                            (_1::_3)
# 982 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
                                            (Past.Cells)
# 988 "parser.ml"
               : 'utils))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                                            (Past.Size)
# 994 "parser.ml"
               : 'utils))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                                            (Past.Length)
# 1000 "parser.ml"
               : 'utils))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                                            (Past.Reg)
# 1006 "parser.ml"
               : 'utils))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                                            (Past.Sum)
# 1012 "parser.ml"
               : 'utils))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                                            (Past.ForAll)
# 1018 "parser.ml"
               : 'quantifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                                            (Past.Exists)
# 1024 "parser.ml"
               : 'quantifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
                                            (Past.NForAll)
# 1030 "parser.ml"
               : 'quantifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                                            (Past.NExists)
# 1036 "parser.ml"
               : 'quantifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
                                            (Past.Distinct)
# 1042 "parser.ml"
               : 'constraints))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                                            (Past.Equivalent)
# 1048 "parser.ml"
               : 'constraints))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'utils) in
    Obj.repr(
# 98 "parser.mly"
                                            (Past.Utils(location(), _1, _2))
# 1056 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 99 "parser.mly"
                                            (_1)
# 1063 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    Obj.repr(
# 100 "parser.mly"
                                            (_2)
# 1070 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
    Obj.repr(
# 101 "parser.mly"
                                            (_1)
# 1077 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 102 "parser.mly"
                                            (Past.Op(location(), _1, Past.Add, _3))
# 1085 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 103 "parser.mly"
                                            (Past.Op(location(), _1, Past.Sub, _3))
# 1093 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 104 "parser.mly"
                                            (Past.Op(location(), _1, Past.Mul, _3))
# 1101 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 105 "parser.mly"
                                            (Past.Op(location(), _1, Past.Div, _3))
# 1109 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 106 "parser.mly"
                                            (Past.UnaryOp(location(), Past.Abs, _2))
# 1116 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 107 "parser.mly"
                                            (Past.UnaryOp(location(), Past.Neg, _2))
# 1123 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 108 "parser.mly"
                                            (Past.UnaryOp(location(), Past.Abs, Past.Op(location(), _2, Past.Sub, _3)))
# 1131 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 109 "parser.mly"
                                            (Past.Op(location(), _1, Past.And, _3))
# 1139 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 110 "parser.mly"
                                            (Past.Op(location(), _1, Past.Or, _3))
# 1147 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 111 "parser.mly"
                                            (Past.Op(location(), _1, Past.Xor, _3))
# 1155 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 112 "parser.mly"
                                            (Past.UnaryOp(location(), Past.Not, _2))
# 1162 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'group) in
    Obj.repr(
# 113 "parser.mly"
                                            (Past.Assign(location(), _1, Past.Group(location(), _3)))
# 1170 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 114 "parser.mly"
                                            (Past.Op(location(), _1, Past.Equal, _3))
# 1178 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 115 "parser.mly"
                                            (Past.Op(location(), _1, Past.LT, _3))
# 1186 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 116 "parser.mly"
                                            (Past.Op(location(), _1, Past.GT, _3))
# 1194 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 117 "parser.mly"
                                            (Past.Op(location(), _1, Past.LTE, _3))
# 1202 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 118 "parser.mly"
                                            (Past.Op(location(), _1, Past.GTE, _3))
# 1210 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 119 "parser.mly"
                                            (Past.Op(location(), _1, Past.Unequal, _3))
# 1218 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 120 "parser.mly"
                                            (Past.Op(location(), _1, Past.LeftImp, _3))
# 1226 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 121 "parser.mly"
                                            (Past.Op(location(), _1, Past.RightImp, _3))
# 1234 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 122 "parser.mly"
                                            (Past.Op(location(), _1, Past.BiImp, _3))
# 1242 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 123 "parser.mly"
                                                                 (Past.SpecOp(location(), _1, Past.Adjacent(Some _5), _3))
# 1251 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 124 "parser.mly"
                                            (Past.SpecOp(location(), _1, Past.Adjacent(None), _3))
# 1259 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'quantifier) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'group) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    Obj.repr(
# 126 "parser.mly"
                                            (Past.Quantifier(location(), _1, _2, _4, _7))
# 1269 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'quantifier) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'dec) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    Obj.repr(
# 128 "parser.mly"
                                            (Past.Quantifier(location(), _1, _2, Past.Grid, _5))
# 1278 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 129 "parser.mly"
                                            (Past.Member(location(), Past.List(location(), _1), _3))
# 1286 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'datatype) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'group) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'constraints) in
    Obj.repr(
# 130 "parser.mly"
                                            (Past.Sugar(location(), _1, Past.Group(location(), _3), _5))
# 1295 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 133 "parser.mly"
                                            ((location(), _2, _4))
# 1303 "parser.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'init) in
    Obj.repr(
# 134 "parser.mly"
                                            (_1)
# 1310 "parser.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 137 "parser.mly"
                                            ([_1])
# 1317 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    Obj.repr(
# 138 "parser.mly"
                                            ([_1])
# 1324 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 139 "parser.mly"
                                            (_1::_3)
# 1332 "parser.ml"
               : 'expr_list))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : ((Lexing.position * int * int) * Past.expr list))
